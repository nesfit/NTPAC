/**
 * NTPAC API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.1-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CaptureDetailDTO', 'model/CaptureListDTO'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CaptureDetailDTO'), require('../model/CaptureListDTO'));
  } else {
    // Browser globals (root is window)
    if (!root.NtpacApi) {
      root.NtpacApi = {};
    }
    root.NtpacApi.CaptureApi = factory(root.NtpacApi.ApiClient, root.NtpacApi.CaptureDetailDTO, root.NtpacApi.CaptureListDTO);
  }
}(this, function(ApiClient, CaptureDetailDTO, CaptureListDTO) {
  'use strict';

  /**
   * Capture service.
   * @module api/CaptureApi
   * @version 0.0.1
   */

  /**
   * Constructs a new CaptureApi. 
   * @alias module:api/CaptureApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the captureDelete operation.
     * @callback module:api/CaptureApi~captureDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/CaptureApi~captureDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.captureDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling captureDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/Capture/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the captureGet operation.
     * @callback module:api/CaptureApi~captureGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CaptureDetailDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/CaptureApi~captureGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CaptureDetailDTO}
     */
    this.captureGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling captureGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CaptureDetailDTO;

      return this.apiClient.callApi(
        '/api/Capture/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the captureGetAll operation.
     * @callback module:api/CaptureApi~captureGetAllCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CaptureListDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/CaptureApi~captureGetAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CaptureListDTO>}
     */
    this.captureGetAll = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [CaptureListDTO];

      return this.apiClient.callApi(
        '/api/Capture', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
